# -*- coding: utf-8 -*-
"""CODSOFT-TASK5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uEoHBRO0ZRqoqmVFuWvvd6whH1GdOoRP
"""

# Install imbalanced-learn if not already installed
!pip install -q imbalanced-learn

# Import required libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LogisticRegression
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix
from imblearn.over_sampling import SMOTE

df = pd.read_csv('/content/creditcard.csv')

# View basic info
print("Dataset shape:", df.shape)
print(df.head())

# Check for missing values
print("Missing values:\n", df.isnull().sum())

# Separate features and target
X = df.drop("Class", axis=1)
y = df["Class"]

# Normalize features using StandardScaler
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)

# Show original class distribution
print("Original class distribution:\n", y.value_counts())

# Use SMOTE to oversample the minority class
smote = SMOTE(random_state=42)
X_resampled, y_resampled = smote.fit_resample(X_scaled, y)

# Show new class distribution
print("Resampled class distribution:\n", pd.Series(y_resampled).value_counts())

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    X_resampled, y_resampled, test_size=0.2, random_state=42)

# Logistic Regression
log_model = LogisticRegression(max_iter=1000)
log_model.fit(X_train, y_train)
y_pred_log = log_model.predict(X_test)

# Random Forest
rf_model = RandomForestClassifier(n_estimators=100, random_state=42)
rf_model.fit(X_train, y_train)
y_pred_rf = rf_model.predict(X_test)

# Evaluate Logistic Regression
print("Logistic Regression Performance:")
print(confusion_matrix(y_test, y_pred_log))
print(classification_report(y_test, y_pred_log))

# Evaluate Random Forest
print("Random Forest Performance:")
print(confusion_matrix(y_test, y_pred_rf))
print(classification_report(y_test, y_pred_rf))

# Function to plot confusion matrix
def plot_confusion(cm, title):
    plt.figure(figsize=(5, 4))
    sns.heatmap(cm, annot=True, fmt="d", cmap="Blues")
    plt.title(title)
    plt.xlabel("Predicted")
    plt.ylabel("Actual")
    plt.show()

# Plot for both models
plot_confusion(confusion_matrix(y_test, y_pred_log), "Logistic Regression Confusion Matrix")
plot_confusion(confusion_matrix(y_test, y_pred_rf), "Random Forest Confusion Matrix")
